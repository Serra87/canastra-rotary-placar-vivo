
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { v4 as uuidv4 } from 'uuid';

const SUPABASE_URL = "https://oradszlwboshvbfjbfgs.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9yYWRzemx3Ym9zaHZiZmpiZmdzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5MzQyMzEsImV4cCI6MjA2MTUxMDIzMX0.ixHTpaORdxvKDhqjnNPWyuxJLZb4NfjG_xL_125lhU8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to generate valid UUIDs
export const generateUUID = () => uuidv4();

// Convert mock ID to valid UUID (for backward compatibility)
export const ensureValidUUID = (id: string): string => {
  // Check if id is already a valid UUID
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  if (uuidRegex.test(id)) {
    return id;
  }
  
  // If not a valid UUID, generate a new one and log a warning
  console.warn(`ID inv√°lido detectado: "${id}". Gerando novo UUID.`);
  return generateUUID();
};
